%%
%% Generic Routines to handle EtherCAT
%% 
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPLv3+

%addincludepath ".."
%include "ETL.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function InitEtherCAT() void
%% This function checks whether the EtherCAT system has been called once
%% before already, which is demonstrated by the existance of variable 
%% ::EtherCAT. If not, include C-header file for EtherCAT, 
%% and declare a variable where the slave's data structure is placed 
%% by EtherCAT when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if EXISTS(CompiledModel.EtherCAT)
    %return
  %endif

  %trace "Initializing EtherCAT Interface"

  %<InitETL()>

  %% MasterSampleTime is used to detect whether the task is prepared
  %% for EtherCAT
  %assign MasterSampleTime = []
  %foreach i = ETL.NumSt
    %assign MasterSampleTime = MasterSampleTime + 0.0
  %endforeach

  %addtorecord CompiledModel EtherCAT { ...
              MasterSampleTime MasterSampleTime ...
              Pdo "pdo" ...
              Slave "slave" ...
              SlaveOwner "" ...
              PDO_Map {} ...
              SlaveCount 0 ...
              model_c LibGetModelDotCFile() ...
              }

  %with CompiledModel

    %% EtherCAT header
    %<LibAddToCommonIncludes("<ecrt_support.h>")>
    %<LibAddToCommonIncludes("<stdio.h>")>
  
    %openfile buf
    const struct ec_slave *slave_head;
    const struct ec_slave **slave_list = &slave_head;

    %closefile buf
    %<LibMdlStartCustomCode(buf, "header")>

    %openfile buf
  
    /* Initializing EtherCAT subsystem */
    if ((%<ETL.ErrStr> = \
        ecs_init(etl_st, %<ETL.NumSt>, %<LibIsSingleTasking()>))) {
          snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
             "Initializing EtherCAT subsystem failed: %s", %<ETL.ErrStr>);
          %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
          return;
    }
    %closefile buf
    %<LibMdlStartCustomCode(buf, "execution")>
  
    %openfile buf
  
    /* Starting EtherCAT slaves */
    if ((%<ETL.ErrStr> = ecs_start_slaves(slave_head))) {
          snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
             "Starting EtherCAT subsystem failed: %s", %<ETL.ErrStr>);
          %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
          return;
    }
    %closefile buf
    %<LibMdlStartCustomCode(buf, "trailer")>
  
    %openfile buf
  
    /* Shutting down EtherCAT subsystem */
    ecs_end(%<ETL.NumSt>);
    %closefile buf
    %<LibMdlTerminateCustomCode(buf, "execution")>
  
    %openfile buf

    /* EtherCAT Processsing */
    ecs_receive();
    #ifdef ASYNC_ECAT
    ecs_send();
    #endif
    %closefile buf
    %<LibSystemOutputCustomCode(system,buf,"execution")>

    %openfile buf

    /* EtherCAT Processsing */
    #ifndef ASYNC_ECAT
    ecs_send();
    #endif
    %closefile buf
    %<LibSystemUpdateCustomCode(system,buf,"trailer")>

  %endwith

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetEtherCATId()
%% Every EtherCAT slave calls InitEtherCAT, where a unique Id is generated
%% per slave. This function returns the Id
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign CompiledModel.EtherCAT.SlaveCount = ...
              CompiledModel.EtherCAT.SlaveCount + 1
  %return CompiledModel.EtherCAT.SlaveCount
%endfunction
